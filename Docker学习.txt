https://blog.csdn.net/weixin_43591980/article/details/106272050?utm_medium=distribute.pc_relevant.none-task-blog-baidulandingword-6&spm=1001.2101.3001.4242

https://blog.csp1999.top/blog/blog/29


1.准备工作
$ sudo apt-get update

$ sudo apt-get install \
    apt-transport-https \
    ca-certificates \
    curl \
    gnupg-agent \
    software-properties-common



2.安装官方key
$ curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -

$ sudo apt-key fingerprint 0EBFCD88

pub   rsa4096 2017-02-22 [SCEA]
      9DC8 5822 9FC7 DD38 854A  E2D8 8D81 803C 0EBF CD88
uid           [ unknown] Docker Release (CE deb) <docker@docker.com>
sub   rsa4096 2017-02-22 [S]



3.安装软件源
sudo add-apt-repository \
   "deb [arch=amd64] https://mirrors.aliyun.com/docker-ce/linux/ubuntu \
   $(lsb_release -cs) \
   stable"
   
   
4.安装docker引擎
 $ sudo apt-get update
 $ sudo apt-get install docker-ce docker-ce-cli containerd.io
 
5.验证安装
jack@ubuntu:~$ docker version
Client: Docker Engine - Community
 Version:           19.03.12
 API version:       1.40
 Go version:        go1.13.10
 Git commit:        48a66213fe
 Built:             Mon Jun 22 15:45:49 2020
 OS/Arch:           linux/amd64
 Experimental:      false


6.卸载软件
#1. 卸载依赖
yum remove docker-ce docker-ce-cli containerd.io
#2. 删除资源
rm -rf /var/lib/docker
# /var/lib/docker 是docker的默认工作路径！
  
  
7.安装后的配置
a.允许普通用户运行docker
$ sudo groupadd docker //创建一个组
$ sudo usermod -aG docker jack //创建一个组成员
$ newgrp docker  //让这个成员生效

b. 设置docker自启动
$ sudo systemctl enable docker
$ sudo systemctl disable docker //取消自启动

8.配置阿里云镜像加速
您可以通过修改daemon配置文件/etc/docker/daemon.json来使用加速器

sudo mkdir -p /etc/docker
sudo tee /etc/docker/daemon.json <<-'EOF'
{
  "registry-mirrors": ["https://myhrjxog.mirror.aliyuncs.com"]
}
EOF
sudo systemctl daemon-reload
sudo systemctl restart docker






docker的使用
1.帮助命令

docker version    #显示docker的版本信息。
docker info       #显示docker的系统信息，包括镜像和容器的数量
docker 命令 --help #帮助命令
帮助文档的地址：https://docs.docker.com/engine/reference/commandline/build/


2.镜像命令
docker images #查看所有本地主机上的镜像 可以使用docker image ls代替
docker search #搜索镜像
docker pull #下载镜像 docker image pull
docker rmi #删除镜像 docker image rm

jack@ubuntu:/etc/docker$ docker images
REPOSITORY          TAG                 IMAGE ID            CREATED             SIZE
ubuntu              latest              4e2eef94cd6b        5 days ago          73.9MB
# 解释
#REPOSITORY			# 镜像的仓库源
#TAG				# 镜像的标签(版本)		---lastest 表示最新版本
#IMAGE ID			# 镜像的id
#CREATED			# 镜像的创建时间
#SIZE				# 镜像的大小
# 可选项
Options:
  -a, --all  #列出所有镜像
  -q, --quiet # 只显示镜像的id

#搜索镜像收藏STARS数量大于3000的  
jack@ubuntu:~$ docker search mysql --filter=STARS=3000
NAME                DESCRIPTION                                     STARS               OFFICIAL            AUTOMATED
mysql               MySQL is a widely used, open-source relation…   9883                [OK]                
mariadb             MariaDB is a community-developed fork of MyS…   3615                [OK]                
 
# 下载镜像 docker pull 镜像名[:tag]
[root@iz2zeak7sgj6i7hrb2g862z ~]# docker pull tomcat:8
8: Pulling from library/tomcat #如果不写tag，默认就是latest
90fe46dd8199: Already exists   #分层下载： docker image 的核心 联合文件系统
35a4f1977689: Already exists 
bbc37f14aded: Already exists 
74e27dc593d4: Already exists 
93a01fbfad7f: Already exists 
1478df405869: Pull complete 
64f0dd11682b: Pull complete 
68ff4e050d11: Pull complete 
f576086003cf: Pull complete 
3b72593ce10e: Pull complete 
Digest: sha256:0c6234e7ec9d10ab32c06423ab829b32e3183ba5bf2620ee66de866df # 签名防伪
Status: Downloaded newer image for tomcat:8
docker.io/library/tomcat:8 #真实地址
#等价于
docker pull tomcat:8
docker pull docker.io/library/tomcat:8

docker rmi -f 镜像id #删除指定id的镜像
[root@iz2zeak7sgj6i7hrb2g862z ~]# docker rmi -f f19c56ce92a8
docker rmi -f $(docker images -aq) #删除全部的镜像
[root@iz2zeak7sgj6i7hrb2g862z ~]# docker stop $(docker ps -a -q)


3.容器命令
docker run 镜像id #新建容器并启动
docker ps 列出所有运行的容器或使用docker container list
docker rm 容器id #删除指定容器
docker start 容器id	#启动容器
docker restart 容器id	#重启容器
docker stop 容器id	#停止当前正在运行的容器
docker kill 容器id	#强制停止当前容器

新建容器并启动
docker run [可选参数] image 
docker container run [可选参数] image 
#参书说明
--name="tomcat01"	#容器名字 tomcat01 tomcat02 用来区分容器
-d					#后台方式运行
-it 				#使用交互方式运行，进入容器查看内容
-p					#指定容器的端口 -p 8080(宿主机):8080(容器)
		                            -p ip:主机端口:容器端口
		                            -p 容器端口
-P(大写) 			#随机指定端口
# 测试、启动并进入容器
jack@ubuntu:~$ docker run -it ubuntu /bin/bash
root@b335f91f133b:/# ls
bin  boot  dev  etc  home  lib  lib32  lib64  libx32  media  mnt  opt  proc  root  run  sbin  srv  sys  tmp  usr  var
root@b335f91f133b:/home# exit
exit         #从容器退回主机
jack@ubuntu:~$ 


列出所有运行的容器
docker ps 命令  	#列出当前正在运行的容器
  -a, --all     	 #列出当前正在运行的容器 + 带出历史运行过的容器
  -n=?, --last int   #列出最近创建的?个容器 ?为1则只列出最近创建的一个容器,为2则列出2个
  -q, --quiet        #只列出容器的编号
  
退出容器
exit 		#容器直接退出
ctrl +P +Q  #容器不停止退出 	---注意：这个很有用的操作  

启动和停止容器的操作
docker start   容器id	#启动容器
docker restart 容器id	#重启容器
docker stop    容器id	#停止当前正在运行的容器
docker kill    容器id	#强制停止当前容器  

删除容器
docker rm 容器id   				#删除指定的容器，不能删除正在运行的容器，如果要强制删除 rm -rf
docker rm -f $(docker ps -aq)  	 #删除所有的容器
docker ps -a -q|xargs docker rm  #删除所有的容器

4.常用其他命令
后台启动命令
# 命令 docker run -d 镜像名
[root@iz2zeak7sgj6i7hrb2g862z ~]# docker run -d centos
a8f922c255859622ac45ce3a535b7a0e8253329be4756ed6e32265d2dd2fac6c
[root@iz2zeak7sgj6i7hrb2g862z ~]# docker ps    
CONTAINER ID      IMAGE       COMMAND    CREATED     STATUS   PORTS    NAMES
# 问题docker ps. 发现centos 停止了
# 常见的坑，docker容器使用后台运行，就必须要有要一个前台进程，docker发现没有应用，就会自动停止
# nginx，容器启动后，发现自己没有提供服务，就会立刻停止，就是没有程序了

查看容器中正在运行的进程信息
# 命令 docker top 容器id
jack@ubuntu:~$ docker top nodejs1 
UID                 PID                 PPID                C                   STIME               TTY                 TIME                CMD
root                8280                8262                0                   17:58               pts/0               00:00:00            bash
root                8360                8280                1                   17:58               pts/0               00:00:00            homebridge


查看容器的属性
# 命令
docker inspect 容器id
jack@ubuntu:~$ docker inspect nodejs1
[
    {
        "Id": "d9b0e34f541fbab9e1aaf694529f7b5ee2fb77d829426eb0c82777b909970a67",
        "Created": "2020-08-26T09:04:58.966030358Z",
        "Path": "docker-entrypoint.sh",
        "Args": [
            "bash"
        ],可以查看网络，创建时间，哪个镜像生成的等属性
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
]

查看日志
docker logs --help
Options:
      --details        Show extra details provided to logs 
*  -f, --follow         Follow log output
      --since string   Show logs since timestamp (e.g. 2013-01-02T13:23:37) or relative (e.g. 42m for 42 minutes)
*      --tail string    Number of lines to show from the end of the logs (default "all")
*  -t, --timestamps     Show timestamps
      --until string   Show logs before a timestamp (e.g. 2013-01-02T13:23:37) or relative (e.g. 42m for 42 minutes)
➜  ~ docker run -d centos /bin/sh -c "while true;do echo 6666;sleep 1;done" #模拟日志      
#显示日志(这种日志会一直记录，后台输出什么就记录什么)
--tail number #需要显示日志条数
docker logs -t --tail n 容器id #查看n行日志
docker logs -tf 容器id #显示日志信息（一直更新）

进入当前正在运行的容器
我们通常容器都是使用后台方式运行的，需要进入容器，修改一些配置命令,exec可以执行一些指令
docker exec -it 容器id  /bin/bash
docker attach 容器id #进入容器正在执行的终端

从容器内复制文件到主机上
docker cp 容器id:容器内路径  主机目的路径  --从容器复制到主机
docker cp 主机目的路径 容器id:容器内路径   --从主机复制到容器

  命令大全
  attach      Attach local standard input, output, and error streams to a running container
  #当前shell下 attach连接指定运行的镜像
  build       Build an image from a Dockerfile # 通过Dockerfile定制镜像
  commit      Create a new image from a container's changes #提交当前容器为新的镜像
  cp          Copy files/folders between a container and the local filesystem #拷贝文件
  create      Create a new container #创建一个新的容器
  diff        Inspect changes to files or directories on a container's filesystem #查看docker容器的变化
  events      Get real time events from the server # 从服务获取容器实时时间
  exec        Run a command in a running container # 在运行中的容器上运行命令
  export      Export a container's filesystem as a tar archive #导出容器文件系统作为一个tar归档文件[对应import]
  history     Show the history of an image # 展示一个镜像形成历史
  images      List images #列出系统当前的镜像
  import      Import the contents from a tarball to create a filesystem image #从tar包中导入内容创建一个文件系统镜像
  info        Display system-wide information # 显示全系统信息
  inspect     Return low-level information on Docker objects #查看容器详细信息
  kill        Kill one or more running containers # kill指定docker容器
  load        Load an image from a tar archive or STDIN #从一个tar包或标准输入中加载一个镜像[对应save]
  login       Log in to a Docker registry #
  logout      Log out from a Docker registry
  logs        Fetch the logs of a container
  pause       Pause all processes within one or more containers
  port        List port mappings or a specific mapping for the container
  ps          List containers
  pull        Pull an image or a repository from a registry
  push        Push an image or a repository to a registry
  rename      Rename a container
  restart     Restart one or more containers
  rm          Remove one or more containers
  rmi         Remove one or more images
  run         Run a command in a new container
  save        Save one or more images to a tar archive (streamed to STDOUT by default)
  search      Search the Docker Hub for images
  start       Start one or more stopped containers
  stats       Display a live stream of container(s) resource usage statistics
  stop        Stop one or more running containers
  tag         Create a tag TARGET_IMAGE that refers to SOURCE_IMAGE
  top         Display the running processes of a container
  unpause     Unpause all processes within one or more containers
  update      Update configuration of one or more containers
  version     Show the Docker version information
  wait        Block until one or more containers stop, then print their exit codes
  
  
5.配置服务端口
# -d 后台运行
# --name 给容器命名
# -p 宿主机端口：容器内部端口
[root@iz2zeak7sgj6i7hrb2g862z ~]# docker run -d --name nginx01 -p 3344:80 -p 4331:433 nginx

6.查看docker运行状态
docker state
CONTAINER ID        NAME                CPU %               MEM USAGE / LIMIT     MEM %               NET I/O             BLOCK I/O           PIDS
e70188d34241        nginx4              0.00%               1.418MiB / 974.3MiB   0.15%               7.71kB / 4.76kB     0B / 0B             2
3b288908e1eb        nginx1              0.00%               480KiB / 974.3MiB     0.05%               5.21kB / 840B       0B / 0B             1

7.对容器内部的环境进行配置
docker run -d --name elasticsearch -p 9200:9200 -p 9300:9300 -e "discovery.type=single-node" -e ES_JAVA_OPTS="-Xms64m -Xmx512m" elasticsearch:7.6.2

8.commit镜像
docker commit 提交容器成为一个新的副本
# 命令和git原理类似
docker commit -m="描述信息" -a="作者" 容器id 目标镜像名:[版本TAG]
jack@ubuntu:~$ docker commit -m=xinzheng_homebridge -a=for_chen_wei_ming nodejs1 nodejs_homebridge:v1.0
sha256:38239d8f6e181bbd115fe82f2bf893cf6703b30568593be15ba05c38e10e5984
jack@ubuntu:~$ docker images
REPOSITORY          TAG                 IMAGE ID            CREATED             SIZE
nodejs_homebridge   v1.0                38239d8f6e18        9 seconds ago       960MB
ubuntu              latest              4e2eef94cd6b        8 days ago          73.9MB
nginx               latest              4bb46517cac3        2 weeks ago         133MB
node                latest              784e696f5060        2 weeks ago         943MB


docker数据卷操作
1.直接使用命令挂载 -v
-v, --volume list                    Bind mount a volume
docker run -it -v 主机目录:容器内目录  -p 主机端口:容器内端口
jack@ubuntu:~$ docker run -v /home/jack/www:/usr/share/nginx/html --name=nginx1 -p 1235:80 -it nginx /bin/bash
#这时候主机的/home/jack/www文件夹就和容器的/usr/share/nginx/html文件夹关联了,二者可以实现文件或数据同步了(开始时是容器内容跟随主机内容)
#通过 docker inspect 容器id 查看挂载的状态
docker inspect nginx1
        "Mounts": [
            {
                "Type": "bind",
                "Source": "/home/jack/www",
                "Destination": "/usr/share/nginx/html",
                "Mode": "",
                "RW": true,
                "Propagation": "rprivate"
            }
           ]
安装MySQL实验
-d 后台运行
-p 端口映射
-v 卷挂载
-e 环境配置
-- name 容器名字
$ docker run -d -p 3310:3306 -v /home/mysql/conf:/etc/mysql/conf.d -v /home/mysql/data:/var/lib/mysql -e MYSQL_ROOT_PASSWORD=123456 --name mysql03 mysql:5.7
# 启动成功之后，我们在本地使用sqlyog来测试一下
# sqlyog-连接到服务器的3306--和容器内的3306映射 
# 在本地测试创建一个数据库，查看一下我们映射的路径是否ok！	   
		   
		   