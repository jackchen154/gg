https://blog.csdn.net/weixin_43591980/article/details/106272050?utm_medium=distribute.pc_relevant.none-task-blog-baidulandingword-6&spm=1001.2101.3001.4242

https://blog.csp1999.top/blog/blog/29

[root@iz2zeak7sgj6i7hrb2g862z ~]# uname -r
3.10.0-514.26.2.el7.x86_64	# 要求3.0以上
[root@iz2zeak7sgj6i7hrb2g862z ~]# cat /etc/os-release 
NAME="CentOS Linux"
VERSION="7 (Core)"
ID="centos"
ID_LIKE="rhel fedora"
VERSION_ID="7"
PRETTY_NAME="CentOS Linux 7 (Core)"
ANSI_COLOR="0;31"
CPE_NAME="cpe:/o:centos:centos:7"
HOME_URL="https://www.centos.org/"
BUG_REPORT_URL="https://bugs.centos.org/"

CENTOS_MANTISBT_PROJECT="CentOS-7"
CENTOS_MANTISBT_PROJECT_VERSION="7"
REDHAT_SUPPORT_PRODUCT="centos"
REDHAT_SUPPORT_PRODUCT_VERSION="7"

1.准备工作
$ sudo apt-get update

$ sudo apt-get install \
    apt-transport-https \
    ca-certificates \
    curl \
    gnupg-agent \
    software-properties-common



2.安装官方key
$ curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -

$ sudo apt-key fingerprint 0EBFCD88

pub   rsa4096 2017-02-22 [SCEA]
      9DC8 5822 9FC7 DD38 854A  E2D8 8D81 803C 0EBF CD88
uid           [ unknown] Docker Release (CE deb) <docker@docker.com>
sub   rsa4096 2017-02-22 [S]



3.安装软件源
sudo add-apt-repository \
   "deb [arch=amd64] https://mirrors.aliyun.com/docker-ce/linux/ubuntu \
   $(lsb_release -cs) \
   stable"
会在apt/source.list中生成 deb [arch=amd64] https://mirrors.aliyun.com/docker-ce/linux/ubuntu xenial stable

   
4.安装docker引擎
 $ sudo apt-get update
 $ sudo apt-get install docker-ce docker-ce-cli containerd.io
 
5.验证安装
jack@ubuntu:~$ docker version
Client: Docker Engine - Community
 Version:           19.03.12
 API version:       1.40
 Go version:        go1.13.10
 Git commit:        48a66213fe
 Built:             Mon Jun 22 15:45:49 2020
 OS/Arch:           linux/amd64
 Experimental:      false


6.卸载软件
#1. 卸载依赖
yum remove docker-ce docker-ce-cli containerd.io
#2. 删除资源
rm -rf /var/lib/docker
# /var/lib/docker 是docker的默认工作路径！
  
  
7.安装后的配置
a.允许普通用户运行docker
$ sudo groupadd docker //创建一个组
$ sudo usermod -aG docker jack //创建一个组成员
$ newgrp docker  //让这个成员生效

b. 设置docker自启动
$ sudo systemctl enable docker
$ sudo systemctl disable docker //取消自启动

8.配置阿里云镜像加速
您可以通过修改daemon配置文件/etc/docker/daemon.json来使用加速器

sudo mkdir -p /etc/docker
sudo tee /etc/docker/daemon.json <<-'EOF'
{
  "registry-mirrors": ["https://myhrjxog.mirror.aliyuncs.com"]
}
EOF
sudo systemctl daemon-reload
sudo systemctl restart docker






docker的使用
1.帮助命令

docker version    #显示docker的版本信息。
docker info       #显示docker的系统信息，包括镜像和容器的数量
docker 命令 --help #帮助命令
帮助文档的地址：https://docs.docker.com/engine/reference/commandline/build/


2.镜像命令
docker images #查看所有本地主机上的镜像 可以使用docker image ls代替
docker search #搜索镜像
docker pull #下载镜像 docker image pull
docker rmi #删除镜像 docker image rm

jack@ubuntu:/etc/docker$ docker images
REPOSITORY          TAG                 IMAGE ID            CREATED             SIZE
ubuntu              latest              4e2eef94cd6b        5 days ago          73.9MB
# 解释
#REPOSITORY			# 镜像的仓库源
#TAG				# 镜像的标签(版本)		---lastest 表示最新版本
#IMAGE ID			# 镜像的id
#CREATED			# 镜像的创建时间
#SIZE				# 镜像的大小
# 可选项
Options:
  -a, --all  #列出所有镜像
  -q, --quiet # 只显示镜像的id

#搜索镜像收藏STARS数量大于3000的  
jack@ubuntu:~$ docker search mysql --filter=STARS=3000
NAME                DESCRIPTION                                     STARS               OFFICIAL            AUTOMATED
mysql               MySQL is a widely used, open-source relation…   9883                [OK]                
mariadb             MariaDB is a community-developed fork of MyS…   3615                [OK]                
 
# 下载镜像 docker pull 镜像名[:tag]
[root@iz2zeak7sgj6i7hrb2g862z ~]# docker pull tomcat:8
8: Pulling from library/tomcat #如果不写tag，默认就是latest
90fe46dd8199: Already exists   #分层下载： docker image 的核心 联合文件系统
35a4f1977689: Already exists 
bbc37f14aded: Already exists 
74e27dc593d4: Already exists 
93a01fbfad7f: Already exists 
1478df405869: Pull complete 
64f0dd11682b: Pull complete 
68ff4e050d11: Pull complete 
f576086003cf: Pull complete 
3b72593ce10e: Pull complete 
Digest: sha256:0c6234e7ec9d10ab32c06423ab829b32e3183ba5bf2620ee66de866df # 签名防伪
Status: Downloaded newer image for tomcat:8
docker.io/library/tomcat:8 #真实地址
#等价于
docker pull tomcat:8
docker pull docker.io/library/tomcat:8

docker rmi -f 镜像id #删除指定id的镜像
[root@iz2zeak7sgj6i7hrb2g862z ~]# docker rmi -f f19c56ce92a8
docker rmi -f $(docker images -aq) #删除全部的镜像
[root@iz2zeak7sgj6i7hrb2g862z ~]# docker stop $(docker ps -a -q)


3.容器命令
docker run 镜像id #新建容器并启动
docker ps 列出所有运行的容器或使用docker container list
docker rm 容器id #删除指定容器
docker start 容器id	#启动容器
docker restart 容器id	#重启容器
docker stop 容器id	#停止当前正在运行的容器
docker kill 容器id	#强制停止当前容器

新建容器并启动
docker run [可选参数] image 
docker container run [可选参数] image 
#参书说明
--name="tomcat01"	#容器名字 tomcat01 tomcat02 用来区分容器
-d					#detach分离，后台运行
-i                  #--interactive,交互式启动
-t                  #--tty，分配终端
-it 				#使用交互方式运行，进入容器查看内容
-p					#指定端口，将容器内服务的端口映射到宿主机的指定端口，可以使用多个-p
　　　                 -p　<container port>：随机分配宿主机的一个端口作为映射端口
　　　                 -p　<hostport>:<container port>指明主机的端口映射为容器端口
　　　                 -p　<hostip>:<hostport>:<container port>指定主机ip和端口
-P(大写) 			#自动暴露所有容器内端口，宿主随机分配端口
-w                  # --workdir string       指定工作目录 
# 测试、启动并进入容器
jack@ubuntu:~$ docker run -it ubuntu /bin/bash
root@b335f91f133b:/# ls
bin  boot  dev  etc  home  lib  lib32  lib64  libx32  media  mnt  opt  proc  root  run  sbin  srv  sys  tmp  usr  var
root@b335f91f133b:/home# exit
exit         #从容器退回主机
jack@ubuntu:~$ 


列出所有运行的容器
docker ps 命令  	#列出当前正在运行的容器
  -a, --all     	 #列出当前正在运行的容器 + 带出历史运行过的容器
  -n=?, --last int   #列出最近创建的?个容器 ?为1则只列出最近创建的一个容器,为2则列出2个
  -q, --quiet        #只列出容器的编号
  
退出容器
exit 		#容器直接退出
ctrl +P +Q  #容器不停止退出 	---注意：这个很有用的操作  

启动和停止容器的操作
docker start   容器id	#启动容器
docker start [OPTIONS] CONTAINER [CONTAINER…]
常用选项：
    -a：--attach 附加终端
    -I：--interactive 交互式 
例如：[root@app51 ~]# docker start -ia busybox

docker restart 容器id	#重启容器
docker stop    容器id	#停止当前正在运行的容器
docker kill    容器id	#强制停止当前容器  

删除容器
docker rm 容器id   				#删除指定的容器，不能删除正在运行的容器，如果要强制删除 rm -rf
docker rm -f $(docker ps -aq)  	 #删除所有的容器
docker ps -a -q|xargs docker rm  #删除所有的容器

4.常用其他命令
后台启动命令
# 命令 docker run -d 镜像名
[root@iz2zeak7sgj6i7hrb2g862z ~]# docker run -d centos
a8f922c255859622ac45ce3a535b7a0e8253329be4756ed6e32265d2dd2fac6c
[root@iz2zeak7sgj6i7hrb2g862z ~]# docker ps    
CONTAINER ID      IMAGE       COMMAND    CREATED     STATUS   PORTS    NAMES
# 问题docker ps. 发现centos 停止了
# 常见的坑，docker容器使用后台运行，就必须要有要一个前台进程，docker发现没有应用，就会自动停止
# nginx，容器启动后，发现自己没有提供服务，就会立刻停止，就是没有程序了

查看容器中正在运行的进程信息
# 命令 docker top 容器id
jack@ubuntu:~$ docker top nodejs1 
UID                 PID                 PPID                C                   STIME               TTY                 TIME                CMD
root                8280                8262                0                   17:58               pts/0               00:00:00            bash
root                8360                8280                1                   17:58               pts/0               00:00:00            homebridge


查看容器的属性
# 命令
docker inspect 容器id
jack@ubuntu:~$ docker inspect nodejs1
[
    {
        "Id": "d9b0e34f541fbab9e1aaf694529f7b5ee2fb77d829426eb0c82777b909970a67",
        "Created": "2020-08-26T09:04:58.966030358Z",
        "Path": "docker-entrypoint.sh",
        "Args": [
            "bash"
        ],可以查看网络，创建时间，哪个镜像生成的等属性
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
]

查看日志
docker logs --help
Options:
      --details        Show extra details provided to logs 
*  -f, --follow         Follow log output
      --since string   Show logs since timestamp (e.g. 2013-01-02T13:23:37) or relative (e.g. 42m for 42 minutes)
*      --tail string    Number of lines to show from the end of the logs (default "all")
*  -t, --timestamps     Show timestamps
      --until string   Show logs before a timestamp (e.g. 2013-01-02T13:23:37) or relative (e.g. 42m for 42 minutes)
➜  ~ docker run -d centos /bin/sh -c "while true;do echo 6666;sleep 1;done" #模拟日志      
#显示日志(这种日志会一直记录，后台输出什么就记录什么)
--tail number #需要显示日志条数
docker logs -t --tail n 容器id #查看n行日志
docker logs -tf 容器id #显示日志信息（一直更新）

进入当前正在运行的容器
我们通常容器都是使用后台方式运行的，需要进入容器，修改一些配置命令,exec可以执行一些指令
docker exec -it 容器id  /bin/bash
docker exec [OPTIONS] CONTAINER COMMAND [ARG…]
常用选项：
      -d：--detach ，后台运行命令
      -e, --env list             设置env
      -i, --interactive         启用交互式
      -t, --tty                     启用终端
      -u, --user string        指定用户 (格式: <name|uid>[:<group|gid>])
      -w, --workdir string       指定工作目录 
示例：[root@app51 ~]# docker exec -it -u nginx nginx-container /bin/sh
docker attach 容器id #进入容器正在执行的终端

从容器内复制文件到主机上
docker cp 容器id:容器内路径  主机目的路径  --从容器复制到主机
docker cp 主机目的路径 容器id:容器内路径   --从主机复制到容器

  命令大全
  attach      Attach local standard input, output, and error streams to a running container
  #当前shell下 attach连接指定运行的镜像
  build       Build an image from a Dockerfile # 通过Dockerfile定制镜像
  commit      Create a new image from a container's changes #提交当前容器为新的镜像
  cp          Copy files/folders between a container and the local filesystem #拷贝文件
  create      Create a new container #创建一个新的容器
  diff        Inspect changes to files or directories on a container's filesystem #查看docker容器的变化
  events      Get real time events from the server # 从服务获取容器实时时间
  exec        Run a command in a running container # 在运行中的容器上运行命令
  export      Export a container's filesystem as a tar archive #导出容器文件系统作为一个tar归档文件[对应import]
  history     Show the history of an image # 展示一个镜像形成历史
  images      List images #列出系统当前的镜像
  import      Import the contents from a tarball to create a filesystem image #从tar包中导入内容创建一个文件系统镜像
  info        Display system-wide information # 显示全系统信息
  inspect     Return low-level information on Docker objects #查看容器详细信息
  kill        Kill one or more running containers # kill指定docker容器
  load        Load an image from a tar archive or STDIN #从一个tar包或标准输入中加载一个镜像[对应save]
  login       Log in to a Docker registry #
  logout      Log out from a Docker registry
  logs        Fetch the logs of a container
  pause       Pause all processes within one or more containers
  port        List port mappings or a specific mapping for the container
  ps          List containers
  pull        Pull an image or a repository from a registry
  push        Push an image or a repository to a registry
  rename      Rename a container
  restart     Restart one or more containers
  rm          Remove one or more containers
  rmi         Remove one or more images
  run         Run a command in a new container
  save        Save one or more images to a tar archive (streamed to STDOUT by default)
  search      Search the Docker Hub for images
  start       Start one or more stopped containers
  stats       Display a live stream of container(s) resource usage statistics
  stop        Stop one or more running containers
  tag         Create a tag TARGET_IMAGE that refers to SOURCE_IMAGE
  top         Display the running processes of a container
  unpause     Unpause all processes within one or more containers
  update      Update configuration of one or more containers
  version     Show the Docker version information
  wait        Block until one or more containers stop, then print their exit codes
  
  
5.配置服务端口
# -d 后台运行
# --name 给容器命名
# -p 宿主机端口：容器内部端口
[root@iz2zeak7sgj6i7hrb2g862z ~]# docker run -d --name nginx01 -p 3344:80 -p 4331:433 nginx

6.查看docker运行状态
docker state
CONTAINER ID        NAME                CPU %               MEM USAGE / LIMIT     MEM %               NET I/O             BLOCK I/O           PIDS
e70188d34241        nginx4              0.00%               1.418MiB / 974.3MiB   0.15%               7.71kB / 4.76kB     0B / 0B             2
3b288908e1eb        nginx1              0.00%               480KiB / 974.3MiB     0.05%               5.21kB / 840B       0B / 0B             1

7.对容器内部的环境进行配置
docker run -d --name elasticsearch -p 9200:9200 -p 9300:9300 -e "discovery.type=single-node" -e ES_JAVA_OPTS="-Xms64m -Xmx512m" elasticsearch:7.6.2

8.commit镜像
docker commit 提交容器成为一个新的副本
# 命令和git原理类似
docker commit -m="描述信息" -a="作者" 容器id 目标镜像名:[版本TAG]
jack@ubuntu:~$ docker commit -m=xinzheng_homebridge -a=for_chen_wei_ming nodejs1 nodejs_homebridge:v1.0
sha256:38239d8f6e181bbd115fe82f2bf893cf6703b30568593be15ba05c38e10e5984
jack@ubuntu:~$ docker images
REPOSITORY          TAG                 IMAGE ID            CREATED             SIZE
nodejs_homebridge   v1.0                38239d8f6e18        9 seconds ago       960MB
ubuntu              latest              4e2eef94cd6b        8 days ago          73.9MB
nginx               latest              4bb46517cac3        2 weeks ago         133MB
node                latest              784e696f5060        2 weeks ago         943MB


docker数据卷操作
1.直接使用命令挂载 -v
-v, --volume list                    Bind mount a volume
docker run -it -v 主机目录:容器内目录  -p 主机端口:容器内端口
jack@ubuntu:~$ docker run -v /home/jack/www:/usr/share/nginx/html --name=nginx1 -p 1235:80 -it nginx /bin/bash
#这时候主机的/home/jack/www文件夹就和容器的/usr/share/nginx/html文件夹关联了,二者可以实现文件或数据同步了(开始时是容器内容跟随主机内容)
#通过 docker inspect 容器id 查看挂载的状态
docker inspect nginx1
        "Mounts": [
            {
                "Type": "bind",
                "Source": "/home/jack/www",
                "Destination": "/usr/share/nginx/html",
                "Mode": "",
                "RW": true,
                "Propagation": "rprivate"
            }
           ]
1、停止容器2、宿主机修改文件3、启动容器4、容器内的数据依旧是同步的		   
安装MySQL实验
-d 后台运行
-p 端口映射
-v 卷挂载
-e 环境配置
-- name 容器名字
$ docker run -d -p 3310:3306 -v /home/mysql/conf:/etc/mysql/conf.d -v /home/mysql/data:/var/lib/mysql -e MYSQL_ROOT_PASSWORD=123456 --name mysql03 mysql:5.7
# 启动成功之后，我们在本地使用sqlyog来测试一下
# sqlyog-连接到服务器的3306--和容器内的3306映射 
# 在本地测试创建一个数据库，查看一下我们映射的路径是否ok！	   
	
具名和匿名挂载
    # 匿名挂载
    -v 容器内路径!
    $ docker run -d -P --name nginx01 -v /etc/nginx nginx
    # 查看所有的volume(卷)的情况
    $ docker volume ls    
    DRIVER              VOLUME NAME # 容器内的卷名(匿名卷挂载)
    local               21159a8518abd468728cdbe8594a75b204a10c26be6c36090cde1ee88965f0d0
    local               b17f52d38f528893dd5720899f555caf22b31bf50b0680e7c6d5431dbda2802c
    # 这里发现，这种就是匿名挂载，我们在 -v只写了容器内的路径，没有写容器外的路径！
    # 具名挂载 -P:表示随机映射端口
    $ docker run -d -P --name nginx02 -v juming-nginx:/etc/nginx nginx
    9663cfcb1e5a9a1548867481bfddab9fd7824a6dc4c778bf438a040fe891f0ee
    # 查看所有的volume(卷)的情况
    $ docker volume ls                  
    DRIVER              VOLUME NAME
    local               21159a8518abd468728cdbe8594a75b204a10c26be6c36090cde1ee88965f0d0
    local               b17f52d38f528893dd5720899f555caf22b31bf50b0680e7c6d5431dbda2802c
    local               juming-nginx #多了一个名字
    # 通过 -v 卷名：查看容器内路径
    # 查看一下这个卷
    $ docker volume inspect juming-nginx
    [
        {
            "CreatedAt": "2020-05-23T13:55:34+08:00",
            "Driver": "local",
            "Labels": null,
            "Mountpoint": "/var/lib/docker/volumes/juming-nginx/_data", #默认目录
            "Name": "juming-nginx",
            "Options": null,
            "Scope": "local"
        }
    ]

所有的docker容器内的卷，没有指定目录的情况下都是在/var/lib/docker/volumes/自定义的卷名/_data下，
如果指定了目录，docker volume ls 是查看不到的。

区分三种挂载方式

    # 三种挂载： 匿名挂载、具名挂载、指定路径挂载
    -v 容器内路径            #匿名挂载
    -v 卷名：容器内路径          #具名挂载
    -v /宿主机路径：容器内路径 #指定路径挂载 docker volume ls 是查看不到的

拓展：

    # 通过 -v 容器内路径： ro rw 改变读写权限
    ro #readonly 只读
    rw #readwrite 可读可写
    $ docker run -d -P --name nginx05 -v juming:/etc/nginx:ro nginx
    $ docker run -d -P --name nginx05 -v juming:/etc/nginx:rw nginx
    # ro 只要看到ro就说明这个路径只能通过宿主机来操作，容器内部是无法操作！	






Dockerfile
Dockerfile 就是用来构建docker镜像的构建文件！命令脚本！先体验一下！
通过这个脚本可以生成镜像，镜像是一层一层的，脚本是一个个的命令，每个命令都是一层！

    # 创建一个dockerfile文件，名字可以随便 建议Dockerfile
    # 文件中的内容： 指令(大写) + 参数
    $ vim dockerfile1
        FROM centos                     # 当前这个镜像是以centos为基础的
        VOLUME ["volume01","volume02"]     # 挂载卷的卷目录列表(多个目录)
        CMD echo "-----end-----"        # 输出一下用于测试
        CMD /bin/bash                    # 默认走bash控制台
    # 这里的每个命令，就是镜像的一层！
    # 构建出这个镜像 
    -f dockerfile1             # f代表file，指这个当前文件的地址(这里是当前目录下的dockerfile1)
    -t caoshipeng/centos     # t就代表target，指目标目录(注意caoshipeng镜像名前不能加斜杠‘/’)
    .                         # 表示生成在当前目录下
    $ docker build -f dockerfile1 -t caoshipeng/centos .
    Sending build context to Docker daemon   2.56kB
    Step 1/4 : FROM centos
    latest: Pulling from library/centos
    8a29a15cefae: Already exists 
    Digest: sha256:fe8d824220415eed5477b63addf40fb06c3b049404242b31982106ac204f6700
    Status: Downloaded newer image for centos:latest
     ---> 470671670cac
    Step 2/4 : VOLUME ["volume01","volume02"]             # 卷名列表
     ---> Running in c18eefc2c233
    Removing intermediate container c18eefc2c233
     ---> 623ae1d40fb8
    Step 3/4 : CMD echo "-----end-----"                    # 输出 脚本命令
     ---> Running in 70e403669f3c
    Removing intermediate container 70e403669f3c
     ---> 0eba1989c4e6
    Step 4/4 : CMD /bin/bash
     ---> Running in 4342feb3a05b
    Removing intermediate container 4342feb3a05b
     ---> f4a6b0d4d948
    Successfully built f4a6b0d4d948
    Successfully tagged caoshipeng/centos:latest
    # 查看自己构建的镜像
    $ docker images
    REPOSITORY          TAG          IMAGE ID            CREATED              SIZE
    caoshipeng/centos   latest       f4a6b0d4d948        About a minute ago   237MB

    启动自己写的容器镜像

    $ docker run -it f4a6b0d4d948 /bin/bash    # 运行自己写的镜像
    $ ls -l                                 # 查看目录

这个卷和外部一定有一个同步的目录

查看一下卷挂载

    # docker inspect 容器id
    $ docker inspect ca3b45913df5

测试一下刚才的文件是否同步出去了！
这种方式使用的十分多，因为我们通常会构建自己的镜像！
假设构建镜像时候没有挂载卷，要手动镜像挂载 -v 卷名：容器内路径！		   

数据卷容器
用命名的容器挂载数据卷！
    # 测试 启动3个容器，通过刚才自己写的镜像启动
    # 创建docker01：因为我本机是最新版，故这里用latest，狂神老师用的是1.0如下图
    $ docker run -it --name docker01 caoshipeng/centos:latest
    # 查看容器docekr01内容
    $ ls
    bin  home   lost+found    opt   run   sys  var
    dev  lib    media    proc  sbin  tmp  volume01
    etc  lib64  mnt        root  srv   usr  volume02
    # 不关闭该容器退出
    CTRL + Q + P  
    # 创建docker02: 并且让docker02 继承 docker01
    $ docker run -it --name docker02 --volumes-from docker01 caoshipeng/centos:latest
    # 查看容器docker02内容
    $ ls
    bin  home   lost+found    opt   run   sys  var
    dev  lib    media    proc  sbin  tmp  volume01
    etc  lib64  mnt        root  srv   usr  volume02
    # 再新建一个docker03同样继承docker01
    $ docker run -it --name docker03 --volumes-from docker01 caoshipeng/centos:latest
    $ cd volume01    #进入volume01 查看是否也同步docker01的数据
    $ ls 
    docker01.txt
    # 测试：可以删除docker01，查看一下docker02和docker03是否可以访问这个文件
    # 测试发现：数据依旧保留在docker02和docker03中没有被删除
   多个mysql实现数据共享
    $ docker run -d -p 3306:3306 -v /home/mysql/conf:/etc/mysql/conf.d -v /home/mysql/data:/var/lib/mysql -e MYSQL_ROOT_PASSWORD=123456 --name mysql01 mysql:5.7
    $ docker run -d -p 3310:3306 -e MYSQL_ROOT_PASSWORD=123456 --name mysql02 --volumes-from mysql01  mysql:5.7
    # 这个时候，可以实现两个容器数据同步！
   结论：容器之间的配置信息的传递，数据卷容器的生命周期一直持续到没有容器使用为止。但是一旦你持久化到了本地，这个时候，本地的数据是不会删除的
   
DockerFile介绍
dockerfile是用来构建docker镜像的文件！命令参数脚本！
构建步骤：
1、 编写一个dockerfile文件
2、 docker build 构建称为一个镜像
3、 docker run运行镜像
4、 docker push发布镜像（DockerHub 、阿里云仓库)


DockerFile构建过程
基础知识：
1、每个保留关键字(指令）都是必须是大写字母
2、执行从上到下顺序
3、#表示注释
4、每一个指令都会创建提交一个新的镜像曾，并提交！
Dockerfile是面向开发的，我们以后要发布项目，做镜像，就需要编写dockerfile文件，这个文件十分简单！
Docker镜像逐渐成企业交付的标准，必须要掌握！
DockerFile：构建文件，定义了一切的步骤，源代码
DockerImages：通过DockerFile构建生成的镜像，最终发布和运行产品。
Docker容器：容器就是镜像运行起来提供服务。
DockerFile的指令
    FROM              #基础镜像，一切从这里开始构建
    MAINTAINER        #镜像是谁写的， 姓名+邮箱，指定维护者信息
    RUN               #镜像构建的时候需要运行的命令
    ADD               #复制文件添加内容 添加同目录，会自动解压
    WORKDIR           #设置镜像的工作目录
    VOLUME            #设置卷,挂载主机目录
    EXPOSE            #指定对外的端口
    CMD               #指定这个容器启动的时候要运行的命令，只有最后一个会生效，可被替代
    ENTRYPOINT        #指定这个容器启动的时候要运行的命令，可以追加命令
    ONBUILD           #当构建一个被继承DockerFile这个时候就会运行onbuild的指令，触发指令
    COPY              #类似ADD，将我们文件拷贝到镜像中
    ENV               #构建的时候设置环境变量！

    这是一个官网centeos的dockerfile写法
    FROM scratch
    ADD centos-7-x86_64-docker.tar.xz /
    LABEL \
        org.label-schema.schema-version="1.0" \
        org.label-schema.name="CentOS Base Image" \
        org.label-schema.vendor="CentOS" \
        org.label-schema.license="GPLv2" \
        org.label-schema.build-date="20200504" \
        org.opencontainers.image.title="CentOS Base Image" \
        org.opencontainers.image.vendor="CentOS" \
        org.opencontainers.image.licenses="GPL-2.0-only" \
        org.opencontainers.image.created="2020-05-04 00:00:00+01:00"
    CMD ["/bin/bash"]
    Docker Hub 中 99%的镜像都是从这个基础镜像过来的 FROM scratch，然后配置需要的软件和配置来进行构建。


实战测试
    创建一个自己的centos
    # 1./home下新建dockerfile目录
    $ mkdir dockerfile
    # 2. dockerfile目录下新建mydockerfile-centos文件
    $ vim mydockerfile-centos
    # 3.编写Dockerfile配置文件
    FROM centos                            # 基础镜像是官方原生的centos
    MAINTAINER cao<1165680007@qq.com>     # 作者
    ENV MYPATH /usr/local                # 配置环境变量的目录 
    WORKDIR $MYPATH                        # 将工作目录设置为 MYPATH
    RUN yum -y install vim                # 给官方原生的centos 增加 vim指令
    RUN yum -y install net-tools        # 给官方原生的centos 增加 ifconfig命令
    EXPOSE 80                            # 暴露端口号为80
    CMD echo $MYPATH                    # 输出下 MYPATH 路径
    CMD echo "-----end----"                
    CMD /bin/bash                        # 启动后进入 /bin/bash
    # 4.通过这个文件构建镜像
    # 命令： docker build -f 文件路径 -t 镜像名:[tag] .
    $ docker build -f mydockerfile-centos -t mycentos:0.1 .

    $ docker images
    REPOSITORY          TAG                 IMAGE ID            CREATED             SIZE
    mycentos            0.1                 cbf5110a646d        2 minutes ago       311MB
    # 6.测试运行
    $ docker run -it mycentos:0.1         # 注意带上版本号，否则每次都回去找最新版latest
    $ pwd    
    /usr/local                            # 与Dockerfile文件中 WORKDIR 设置的 MYPATH 一致
    $ vim                                # vim 指令可以使用
    $ ifconfig                             # ifconfig 指令可以使用
    # docker history 镜像id 查看镜像构建历史步骤
    $ docker history 镜像id 我们可以列出本地进行的变更历史,平时拿到一个镜像，可以用 “docker history 镜像id” 研究一下是什么做的

    CMD 和 ENTRYPOINT区别
    CMD              # 指定这个容器启动的时候要运行的命令，只有最后一个会生效，可被替代。
    ENTRYPOINT       # 指定这个容器启动的时候要运行的命令，可以追加命令

测试cmd
    # 编写dockerfile文件
    $ vim dockerfile-test-cmd
    FROM centos
    CMD ["ls","-a"]                    # 启动后执行 ls -a 命令
    # 构建镜像
    $ docker build  -f dockerfile-test-cmd -t cmd-test:0.1 .
    # 运行镜像
    $ docker run cmd-test:0.1        # 由结果可得，运行后就执行了 ls -a 命令
    .
    ..
    .dockerenv
    bin
    dev
    etc
    home
    # 想追加一个命令  -l 成为ls -al：展示列表详细数据
    $ docker run cmd-test:0.1 -l
    docker: Error response from daemon: OCI runtime create failed: container_linux.go:349: starting container process caused "exec: \"-l\":
    executable file not found in $PATH": unknown.
    ERRO[0000] error waiting for container: context canceled 
    # cmd的情况下 -l 替换了CMD["ls","-l"] 而 -l  不是命令所以报错

测试ENTRYPOINT
    # 编写dockerfile文件
    $ vim dockerfile-test-entrypoint
    FROM centos
    ENTRYPOINT ["ls","-a"]
    # 构建镜像
    $ docker build  -f dockerfile-test-entrypoint -t cmd-test:0.1 .
    # 运行镜像
    $ docker run entrypoint-test:0.1
    .
    ..
    .dockerenv
    bin
    dev
    etc
    home
    lib
    lib64
    lost+found ...
    # 我们的命令，是直接拼接在我们得ENTRYPOINT命令后面的
    $ docker run entrypoint-test:0.1 -l
    total 56
    drwxr-xr-x   1 root root 4096 May 16 06:32 .
    drwxr-xr-x   1 root root 4096 May 16 06:32 ..
    -rwxr-xr-x   1 root root    0 May 16 06:32 .dockerenv
    lrwxrwxrwx   1 root root    7 May 11  2019 bin -> usr/bin
    drwxr-xr-x   5 root root  340 May 16 06:32 dev
    drwxr-xr-x   1 root root 4096 May 16 06:32 etc
    drwxr-xr-x   2 root root 4096 May 11  2019 home
    lrwxrwxrwx   1 root root    7 May 11  2019 lib -> usr/lib
    lrwxrwxrwx   1 root root    9 May 11  2019 lib64 -> usr/lib64 ....

Dockerfile中很多命令都十分的相似，我们需要了解它们的区别，我们最好的学习就是对比他们然后测试效果！
实战：Tomcat镜像
1、准备镜像文件
    准备tomcat 和 jdk 到当前目录，编写好README
	$ls  >  jdk-8u231-linux-x64.tar.gz apache-tomcat-9.0.35.tar.gz README dokerfile
2、编写dokerfile
    $ vim dockerfile
    FROM centos                                         # 基础镜像centos
    MAINTAINER cao<1165680007@qq.com>                    # 作者
    COPY README /usr/local/README                         # 复制README文件
    ADD jdk-8u231-linux-x64.tar.gz /usr/local/             # 添加jdk，ADD 命令会自动解压
    ADD apache-tomcat-9.0.35.tar.gz /usr/local/         # 添加tomcat，ADD 命令会自动解压
    RUN yum -y install vim                                # 安装 vim 命令
    ENV MYPATH /usr/local                                 # 环境变量设置 工作目录
    WORKDIR $MYPATH
    ENV JAVA_HOME /usr/local/jdk1.8.0_231                 # 环境变量： JAVA_HOME环境变量
    ENV CLASSPATH $JAVA_HOME/lib/dt.jar:$JAVA_HOME/lib/tools.jar
    ENV CATALINA_HOME /usr/local/apache-tomcat-9.0.35     # 环境变量： tomcat环境变量
    ENV CATALINA_BASH /usr/local/apache-tomcat-9.0.35
    # 设置环境变量 分隔符是：
    ENV PATH $PATH:$JAVA_HOME/bin:$CATALINA_HOME/lib:$CATALINA_HOME/bin     
    EXPOSE 8080                                         # 设置暴露的端口
    CMD /usr/local/apache-tomcat-9.0.35/bin/startup.sh && tail -F /usr/local/apache-tomcat-9.0.35/logs/catalina.out                     # 设置默认命令

3、构建镜像
    # 因为dockerfile命名使用默认命名 因此不用使用-f 指定文件
    $ docker build -t mytomcat:0.1 .

4、run镜像
    # -d:后台运行 -p:暴露端口 --name:别名 -v:绑定路径 
    $ docker run -d -p 8080:8080 --name tomcat01 
    -v /home/kuangshen/build/tomcat/test:/usr/local/apache-tomcat-9.0.35/webapps/test 
    -v /home/kuangshen/build/tomcat/tomcatlogs/:/usr/local/apache-tomcat-9.0.35/logs mytomcat:0.1

5、访问测试
    $ docker exec -it 自定义容器的id /bin/bash
    $ cul localhost:8080

6、发布项目
我们以后开发的步骤：需要掌握Dockerfile的编写！我们之后的一切都是使用docker镜像来发布运行！
发布自己的镜像

    发布到 Docker Hub

1、地址 https://hub.docker.com/
2、确定这个账号可以登录
3、登录
    $ docker login -u 你的用户名 -p 你的密码

4、提交 push镜像
    # 会发现push不上去，因为如果没有前缀的话默认是push到 官方的library
    # 解决方法：
    # 第一种 build的时候添加你的dockerhub用户名，然后在push就可以放到自己的仓库了
    $ docker build -t kuangshen/mytomcat:0.1 .
    # 第二种 使用docker tag #然后再次push
    $ docker tag 容器id kuangshen/mytomcat:1.0 #然后再次push
    $ docker push kuangshen/mytomcat:1.0
    发布到 阿里云镜像服务上

看官网很详细https://cr.console.aliyun.com/repository/
    $ sudo docker login --username=zchengx registry.cn-shenzhen.aliyuncs.com
    $ sudo docker tag [ImageId] registry.cn-shenzhen.aliyuncs.com/dsadxzc/cheng:[镜像版本号]
    # 修改id 和 版本
    sudo docker tag a5ef1f32aaae registry.cn-shenzhen.aliyuncs.com/dsadxzc/cheng:1.0
    # 修改版本
    $ sudo docker push registry.cn-shenzhen.aliyuncs.com/dsadxzc/cheng:[镜像版本号]
	
	
Docker 网络
理解Docker 0
学习之前清空下前面的docker 镜像、容器
    # 删除全部容器
    $ docker rm -f $(docker ps -aq)
    # 删除全部镜像
    $ docker rmi -f $(docker images -aq)

问题： docker 是如果处理容器网络访问的？
    # 测试  运行一个tomcat
    $ docker run -d -P --name tomcat01 tomcat
    # 查看容器内部网络地址
    $ docker exec -it 容器id ip addr
    # 发现容器启动的时候会得到一个 eth0@if91 ip地址，docker分配！
    $ ip addr
    261: eth0@if91: <BROADCAST,MULTICAST,UP,LOWER_UP> mtu 1500 qdisc noqueue state UP group default 
        link/ether 02:42:ac:12:00:02 brd ff:ff:ff:ff:ff:ff link-netnsid 0
        inet 172.18.0.2/16 brd 172.18.255.255 scope global eth0
           valid_lft forever preferred_lft forever
    # linux能ping通容器内部,容器内部可以ping通外界！
    $ ping 172.18.0.2
    PING 172.18.0.2 (172.18.0.2) 56(84) bytes of data.
    64 bytes from 172.18.0.2: icmp_seq=1 ttl=64 time=0.069 ms
    64 bytes from 172.18.0.2: icmp_seq=2 ttl=64 time=0.074 ms

原理
1、我们每启动一个docker容器，docker就会给docker容器分配一个ip，我们只要按装了docker，就会有一个docker0桥接模式，使用的技术是veth-pair技术！
https://www.cnblogs.com/bakari/p/10613710.html
再次测试 ip addr
2 、再启动一个容器测试，发现又多了一对网络
    # 我们发现这个容器带来网卡，都是一对对的
    # veth-pair 就是一对的虚拟设备接口，他们都是成对出现的，一端连着协议，一端彼此相连
    # 正因为有这个特性 veth-pair 充当一个桥梁，连接各种虚拟网络设备的
    # OpenStac,Docker容器之间的连接，OVS的连接，都是使用evth-pair技术

3、我们来测试下tomcat01和tomcat02是否可以ping通
    # 获取tomcat01的ip 172.17.0.2
    $ docker-tomcat docker exec -it tomcat01 ip addr  
    550: eth0@if551: <BROADCAST,MULTICAST,UP,LOWER_UP> mtu 1500 qdisc noqueue state UP group default 
        link/ether 02:42:ac:11:00:02 brd ff:ff:ff:ff:ff:ff link-netnsid 0
        inet 172.17.0.2/16 brd 172.17.255.255 scope global eth0
           valid_lft forever preferred_lft forever
    # 让tomcat02 ping tomcat01       
    $ docker-tomcat docker exec -it tomcat02 ping 172.17.0.2
    PING 172.17.0.2 (172.17.0.2) 56(84) bytes of data.
    64 bytes from 172.17.0.2: icmp_seq=1 ttl=64 time=0.098 ms
    64 bytes from 172.17.0.2: icmp_seq=2 ttl=64 time=0.071 ms
    # 结论：容器和容器之间是可以互相ping通
结论：tomcat01和tomcat02公用一个路由器，docker0。
所有的容器不指定网络的情况下，都是docker0路由的，docker会给我们的容器分配一个默认的可用ip。

Docker使用的是Linux的桥接，宿主机是一个Docker容器的网桥 docker0
Docker中所有网络接口都是虚拟的，虚拟的转发效率高（内网传递文件），只要容器删除，对应的网桥一对就没了！

思考一个场景：我们编写了一个微服务，database url=ip: 项目不重启，数据ip换了，我们希望可以处理这个问题，可以通过名字来进行访问容器？
–-link

    $ docker exec -it tomcat02 ping tomca01   # ping不通
    ping: tomca01: Name or service not known
    # 运行一个tomcat03 --link tomcat02 
    $ docker run -d -P --name tomcat03 --link tomcat02 tomcat
    5f9331566980a9e92bc54681caaac14e9fc993f14ad13d98534026c08c0a9aef
    # 3连接2
    # 用tomcat03 ping tomcat02 可以ping通
    $ docker exec -it tomcat03 ping tomcat02
    PING tomcat02 (172.17.0.3) 56(84) bytes of data.
    64 bytes from tomcat02 (172.17.0.3): icmp_seq=1 ttl=64 time=0.115 ms
    64 bytes from tomcat02 (172.17.0.3): icmp_seq=2 ttl=64 time=0.080 ms
    # 2连接3
    # 用tomcat02 ping tomcat03 ping不通

探究：
docker network inspect 网络id 网段相同
docker inspect tomcat03 查看tomcat03里面的/etc/hosts发现有tomcat02的配置
–link 本质就是在hosts配置中添加映射
现在使用Docker已经不建议使用–link了！
自定义网络，不适用docker0！
docker0问题：不支持容器名连接访问！

自定义网络
    docker network
    connect     -- Connect a container to a network
    create      -- Creates a new network with a name specified by the
    disconnect  -- Disconnects a container from a network
    inspect     -- Displays detailed information on a network
    ls          -- Lists all the networks created by the user
    prune       -- Remove all unused networks
    rm          -- Deletes one or more networks
查看所有的docker网络
jack@jack-virtual-machine:~$ docker network ls
NETWORK ID          NAME                DRIVER              SCOPE
df3584936b90        bridge              bridge              local
0e0fbe9a4db6        host                host                local
1ba36e8856da        none                null                local

网络模式
bridge ：桥接 docker（默认，自己创建也是用bridge模式）
none ：不配置网络，一般不用
host ：和所主机共享网络
container ：容器网络连通（用得少！局限很大）
测试
    # 我们直接启动的命令 --net bridge,而这个就是我们得docker0
    # bridge就是docker0
    $ docker run -d -P --name tomcat01 tomcat
    等价于 => docker run -d -P --name tomcat01 --net bridge tomcat
    # docker0，特点：默认，域名不能访问。 --link可以打通连接，但是很麻烦！
    # 我们可以 自定义一个网络
       jack@jack-virtual-machine:~$ docker network create --driver bridge --subnet 192.168.0.0/16 --gateway 192.168.0.1 mynet
       566596d6868f0277b6b4a02bd9d2f7e2728107b474064711cb0e5164a2326a0e
       jack@jack-virtual-machine:~$ docker network ls
       NETWORK ID          NAME                DRIVER              SCOPE
       df3584936b90        bridge              bridge              local
       0e0fbe9a4db6        host                host                local
       566596d6868f        mynet               bridge              local
       1ba36e8856da        none                null                local	
    $ docker network inspect mynet;
       jack@jack-virtual-machine:~$ docker network inspect mynet;
       [
           {
               "Name": "mynet",
               "Id": "566596d6868f0277b6b4a02bd9d2f7e2728107b474064711cb0e5164a2326a0e",
               "Created": "2020-09-15T13:19:57.367712929+08:00",
               "Scope": "local",
               "Driver": "bridge",
               "EnableIPv6": false,
               "IPAM": {
                   "Driver": "default",
                   "Options": {},
                   "Config": [
                       {
                           "Subnet": "192.168.0.0/16",
                           "Gateway": "192.168.0.1"
                       }
                   ]
               },
               "Internal": false,
               "Attachable": false,
               "Ingress": false,
               "ConfigFrom": {
                   "Network": ""
               },
               "ConfigOnly": false,
               "Containers": {},
               "Options": {},
               "Labels": {}
           }
       ]

启动两个nginx,再次查看网络情况
jack@jack-virtual-machine:~$ docker run -d -P --name nginx1 --net mynet nginx
5343deba3069ab7f3f8af21e22cdf689bac7858931d90fd04409f34ac20e0c29
jack@jack-virtual-machine:~$ docker run -d -P --name nginx3 --net mynet nginx
eaaeb325658cbdf302ffd9dcb9b7b2813d5615186332e0757a5f2c359d718cdf
jack@jack-virtual-machine:~$ docker network inspect mynet
[
    {
        "Name": "mynet",
        "Id": "566596d6868f0277b6b4a02bd9d2f7e2728107b474064711cb0e5164a2326a0e",
        "Created": "2020-09-15T13:19:57.367712929+08:00",
        "Scope": "local",
        "Driver": "bridge",
        "EnableIPv6": false,
        "IPAM": {
            "Driver": "default",
            "Options": {},
            "Config": [
                {
                    "Subnet": "192.168.0.0/16",
                    "Gateway": "192.168.0.1"
                }
            ]
        },
        "Internal": false,
        "Attachable": false,
        "Ingress": false,
        "ConfigFrom": {
            "Network": ""
        },
        "ConfigOnly": false,
        "Containers": {
            "5343deba3069ab7f3f8af21e22cdf689bac7858931d90fd04409f34ac20e0c29": {
                "Name": "nginx1",
                "EndpointID": "ace3f72c6fe43d030c460ff7bd80ee1712f3c55f9bdb10de3e7892c082b07e29",
                "MacAddress": "02:42:c0:a8:00:02",
                "IPv4Address": "192.168.0.2/16",
                "IPv6Address": ""
            },
            "eaaeb325658cbdf302ffd9dcb9b7b2813d5615186332e0757a5f2c359d718cdf": {
                "Name": "nginx3",
                "EndpointID": "41fac7d224a53fcff1460c54acb2ce8e6c6702ecc1e1aab6f47388634984a364",
                "MacAddress": "02:42:c0:a8:00:03",
                "IPv4Address": "192.168.0.3/16",
                "IPv6Address": ""
            }
        },
        "Options": {},
        "Labels": {}
    }
]

在自定义的网络下，服务可以互相ping通，不用使用–link
jack@jack-virtual-machine:~$ docker run -it -P --name node2 --net mynet node bash
root@284ff19ed8b2:/# 
jack@jack-virtual-machine:~$ docker run -it -P --name node1 --net mynet node bash
root@302b3245db2c:/# 
jack@jack-virtual-machine:~$ docker exec node1 ping node2
PING node2 (192.168.0.2) 56(84) bytes of data.
64 bytes from node2.mynet (192.168.0.2): icmp_seq=1 ttl=64 time=0.084 ms
64 bytes from node2.mynet (192.168.0.2): icmp_seq=2 ttl=64 time=0.063 ms
^C
jack@jack-virtual-machine:~$ docker exec node2 ping node1
PING node1 (192.168.0.3) 56(84) bytes of data.
64 bytes from node1.mynet (192.168.0.3): icmp_seq=1 ttl=64 time=0.057 ms
64 bytes from node1.mynet (192.168.0.3): icmp_seq=2 ttl=64 time=0.057 ms

我们自定义的网络docker当我们维护好了对应的关系，推荐我们平时这样使用网络！

添加一个容器到自定义网络
    # 测试两个不同的网络连通  再启动两个tomcat 使用默认网络，即docker0
    jack@jack-virtual-machine:~$ docker run -it --name nginx1 nginx bash	
    root@6806de526219:/# 
    jack@jack-virtual-machine:~$ docker exec node1 ping nginx1 
    ping: nginx1: Name or service not known  默认网络，即docker0 所以ping不通
	
    jack@jack-virtual-machine:~$ docker network connect mynet nginx1 添加一个容器到自定义网络
    jack@jack-virtual-machine:~$ docker exec node1 ping nginx1 
    PING nginx1 (192.168.0.4) 56(84) bytes of data.
    64 bytes from nginx1.mynet (192.168.0.4): icmp_seq=1 ttl=64 time=0.102 ms
    64 bytes from nginx1.mynet (192.168.0.4): icmp_seq=2 ttl=64 time=0.069 ms

结论：假设要跨网络操作别人，就需要使用docker network connect 连通！
实战：部署Redis集群

    # 创建网卡
    docker network create redis --subnet 172.38.0.0/16
    # 通过脚本创建六个redis配置
    for port in $(seq 1 6);\
    do \
    mkdir -p /mydata/redis/node-${port}/conf
    touch /mydata/redis/node-${port}/conf/redis.conf
    cat << EOF >> /mydata/redis/node-${port}/conf/redis.conf
    port 6379
    bind 0.0.0.0
    cluster-enabled yes
    cluster-config-file nodes.conf
    cluster-node-timeout 5000
    cluster-announce-ip 172.38.0.1${port}
    cluster-announce-port 6379
    cluster-announce-bus-port 16379
    appendonly yes
    EOF
    done
    # 通过脚本运行六个redis
    for port in $(seq 1 6);\
    docker run -p 637${port}:6379 -p 1667${port}:16379 --name redis-${port} \
    -v /mydata/redis/node-${port}/data:/data \
    -v /mydata/redis/node-${port}/conf/redis.conf:/etc/redis/redis.conf \
    -d --net redis --ip 172.38.0.1${port} redis:5.0.9-alpine3.11 redis-server /etc/redis/redis.conf
    docker exec -it redis-1 /bin/sh #redis默认没有bash
    redis-cli --cluster create 172.38.0.11:6379 172.38.0.12:6379 172.38.0.13:6379 172.38.0.14:6379 172.38.0.15:6379 172.38.0.16:6379  --cluster-replicas 1

docker搭建redis集群完成！

我们使用docker之后，所有的技术都会慢慢变得简单起来！
SpringBoot微服务打包Docker镜像

1、构建SpringBoot项目

2、打包运行

    mvn package

3、编写dockerfile

    FROM java:8
    COPY *.jar /app.jar
    CMD ["--server.port=8080"]
    EXPOSE 8080
    ENTRYPOINT ["java","-jar","app.jar"]

4、构建镜像

    # 1.复制jar和DockerFIle到服务器
    # 2.构建镜像
    $ docker build -t xxxxx:xx  .

5、发布运行

以后我们使用了Docker之后，给别人交付就是一个镜像即可！	


Docker compose安装
1.下载可执行文件
sudo curl -L "https://github.com/docker/compose/releases/download/1.26.2/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
2.添加执行权限
sudo chmod +x /usr/local/bin/docker-compose
3.验证安装
jack@jack-virtual-machine:~$ docker-compose --version
docker-compose version 1.26.2, build eefe0d31
4.卸载软件
sudo rm /usr/local/bin/docker-compose

